<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="accountService" class="com.test.service.impl.AccountService"></bean>

    <!--
    spring中基于xml的AOP的配置
    1、把通知bean也交给spring来管理（配置logger）
    2、使用 aop:config 表明开始aop的配置
    3、使用 aop:aspect 配置切面
            id属性：切面的唯一标识
            ref属性：指定通知类bean的id
    4、在 aop:aspect 的内部使用对应的标签来配置通知类型
                我们此时配置的是前置通知，所以，标签为aop：befor
                aop:before :标识配置的是前置通知
                        method属性：用于指定logger类中哪个方法是前置通知
                        pointcut属性：用于指定切入点表达式，该表达式表示对哪个方法进行增强

                切入点表达式的写法：
                    关键字：execution(表达式)
                    表达式写法：
                        访问修饰符  返回值类型  包名.包名...包名.类名.方法名（参数列表）
                    标准的表达式的写法
                        public void com.test.service.impl.AccountService.saveAccount()
                    访问修饰符可以省略
                        void com.test.service.impl.AccountService.saveAccount()
                    返回值可以使用通配符，表示任意返回值
                        * com.test.service.impl.AccountService.saveAccount()
                    包名可以使用通配符，但是有几级包就要写几个*.
                        * *.*.*.*.AccountService.saveAccount()
                    包名可以使用*..表示当前包及其子包
                        * *..AccountService.saveAccount()
                     类名和方法名可以使用*实现通配
                        * *..*.*()
                    参数列表：
                        可以直接写数据类型：
                            基本数据类型直接写名称 int
                            引用类型写包名.类名的方式 java.lang.String
                        可以使用通配符表示任意类型，但是必须有参数
                            * *..*.*(*)
                        可以使用..表示有无参数均可，有参数可以是任意类型
                            * *..*.*(..)
                    全通配写法
                    * *..*.*(..)
                    实际开发中切入点表达式的通常写法
                        业务层实现类下的所有方法
                        * com.test.service.impl.*.*(..)
    -->

    <!--
    配置切入点表达式
    aop:aspect 的子标签 aop:pointcut
        id属性:提供唯一标识
        execution:提供切入点表达式

    当配置在 aop:aspect 内时，表示此写入点表达式只针对此一个切面
    当配置在 aop:config 内时，表示对所有切面：注意此时的切入点表达式一定要配置在 aop:aspect 之前
    -->
    <bean id="logger" class="com.test.utils.Logger"></bean>

    <aop:config>
        <aop:pointcut id="ptl" expression="execution(* com.test.service.impl.*.*(..))"></aop:pointcut>
        <aop:aspect id="logAdvice" ref="logger">
            <!--
            <aop:before method="beforeAdvice" pointcut-ref="ptl"></aop:before>
            <aop:after-returning method="afterReturnAdvice" pointcut-ref="ptl"></aop:after-returning>
            <aop:after-throwing method="throwingAdvice" pointcut-ref="ptl"></aop:after-throwing>
            <aop:after method="afterAdvice" pointcut-ref="ptl"></aop:after>
            -->
            <aop:around method="aroundAdvice" pointcut-ref="ptl"></aop:around>
        </aop:aspect>
    </aop:config>

</beans>